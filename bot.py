import logging
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from gtts import gTTS
from pydub import AudioSegment
import boto3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
LANGUAGE_KEYBOARD = ReplyKeyboardMarkup(
    [["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# ======================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ======================= #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
        reply_markup=LANGUAGE_KEYBOARD
    )

async def handle_language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫"""
    text = update.message.text
    
    if text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        context.user_data['lang'] = 'ru'
        await update.message.reply_text(
            "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ '–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            reply_markup=ReplyKeyboardRemove()
        )
    elif text == "üá¨üáß English":
        context.user_data['lang'] = 'en'
        await update.message.reply_text(
            "‚úÖ Language set: English\n"
            "Write 'Change language' to switch",
            reply_markup=ReplyKeyboardRemove()
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    if text.lower() in ["—Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "change language"]:
        await start(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if 'lang' not in context.user_data:
        await update.message.reply_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫! / Please choose language first!",
            reply_markup=LANGUAGE_KEYBOARD
        )
        return
    
    lang = context.user_data['lang']
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    reversed_text = " ".join(word[::-1] for word in text.split())
    await update.message.reply_text(reversed_text)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Amazon Polly
    await generate_and_send_audio(update, text, lang)

# ======================= AUDIO GENERATION ======================= #
def polly_tts(text: str, lang: str, output_file: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Amazon Polly"""
    client = boto3.client(
        'polly',
        aws_access_key_id=os.environ['AWS_ACCESS_KEY'],
        aws_secret_access_key=os.environ['AWS_SECRET_KEY'],
        region_name='us-west-2'
    )
    
    # –í—ã–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å –∏ –¥–≤–∏–∂–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    if lang == 'ru':
        voice = 'Tatyana'
        engine = 'standard'  # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫
    else:
        voice = 'Matthew'
        engine = 'neural'    # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—ã–π
    
    response = client.synthesize_speech(
        Text=text,
        OutputFormat='mp3',
        VoiceId=voice,
        Engine=engine  # –î–æ–±–∞–≤–∏–ª–∏ –≤—ã–±–æ—Ä –¥–≤–∏–∂–∫–∞
    )
    
    with open(output_file, 'wb') as f:
        f.write(response['AudioStream'].read())

async def generate_and_send_audio(update: Update, text: str, lang: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
    words = text.split()
    reversed_words = [word[::-1] for word in words]
    
    try:
        audio_segments = []
        for i, word in enumerate(reversed_words):
            temp_file = f"temp_{update.message.message_id}_{i}.mp3"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Polly –≤–º–µ—Å—Ç–æ gTTS
            polly_tts(word, lang, temp_file)
            
            audio = AudioSegment.from_mp3(temp_file)
            audio_segments.append(audio)
            os.remove(temp_file)
        
        # –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ
        combined = AudioSegment.empty()
        for segment in audio_segments:
            combined += segment + AudioSegment.silent(duration=200)
        
        final_file = f"output_{update.message.message_id}.mp3"
        combined.export(final_file, format="mp3")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞
        with open(final_file, 'rb') as audio:
            await update.message.reply_audio(audio)
        os.remove(final_file)
        
    except Exception as e:
        logger.error(f"Audio error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ")

# ======================= –ó–ê–ü–£–°–ö –ë–û–¢–ê ======================= #
def main():
    application = Application.builder().token(os.environ['BOT_TOKEN']).build()
    
    # –í–∞–∂–Ω–æ: –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex(r"^(üá∑üá∫ –†—É—Å—Å–∫–∏–π|üá¨üáß English)$"), handle_language_choice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()